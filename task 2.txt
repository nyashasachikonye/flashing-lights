/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

/* Private macro */
#define GREENLED LED4
#define BLUELED LED6

void delay_ms(uint32_t milli);

uint32_t time=1000;//a variable to store the time
uint32_t hertz=1;//a variable to store the frequency

int main(void)
{
  int count = 0;
  /* Initialize LEDs */
  STM_EVAL_LEDInit(GREENLED);
  STM_EVAL_LEDInit(BLUELED);
  STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_GPIO);//initialize the push button
  /* Turn on LEDs */
  STM_EVAL_LEDOn(GREENLED);
  STM_EVAL_LEDOff(BLUELED);
  /* Infinite loop */
  while (1)
  {
	  /* toggle Green LED */
	  STM_EVAL_LEDToggle(GREENLED);//toggle the lights
	  STM_EVAL_LEDToggle(BLUELED);
	  /* Delay for 1s */
	  delay_ms(time);//delay for the length of the value stored in the time variable

	  /* Increment count by 5 */
	  count += 5;
  }
}



void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  /* TODO, implement your code here */
  return -1;
}

void delay_ms(uint32_t milli)
{

	if(STM_EVAL_PBGetState(BUTTON_USER)==Bit_SET)//if the button is pressed
	{
		while (STM_EVAL_PBGetState(BUTTON_USER)==Bit_SET);//do nothing while it is pressed, this stops the frequency from increasing while the button is pressed
		hertz=hertz+10;//increase the frequency 
		time=(1000/hertz);//calculate the time
		if(time<=20)//wrap around at 50Hz
		{
			time=1000;//reset time and frequency to their initial values
			hertz=1;
		}
		//switch debounce:
		uint32_t smalldelay = 17612;
		for(; smalldelay != 0; smalldelay--);//switch debounce (a small delay)
	}

	uint32_t delay = milli * 17612;
	for(; delay != 0; delay--)
	{

	}
}

